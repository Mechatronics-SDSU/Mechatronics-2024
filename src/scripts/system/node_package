#!/bin/bash

# @Zix
# My favorite Script
# Must be run in the ros2ws/src directory for expected behavior
# Name for package must match "my_node"
# Auto-Gens boilerplate for the package and test code
# No excuses to not test anymore ;)

snake_to_uppercase() 
{
    local snake_case="$1"
    uppercase_string="${snake_case^^}"
    echo "$uppercase_string"
}

snake_to_camel() 
{
    local snake_case="$1"
    local parts=()
    IFS="_" read -ra parts <<< "$snake_case"
    local camel_case=""
    for part in "${parts[@]}"; do
      camel_case+="$(tr '[:lower:]' '[:upper:]' <<< ${part:0:1})${part:1}"
    done
    echo "$camel_case"
}

remove_suffix() {
  local input_string="$1"
  local suffix="_node"

  if [[ "$input_string" == *"$suffix" ]]; then
    trimmed_string="${input_string%"$suffix"}"
  fi
  echo "$trimmed_string"
}

append_data_suffix() {
  local input_string="$1"
  local suffix="_data"
  local new_string="${input_string}${suffix}"
  echo "$new_string"
}

append_exec_suffix() {
  local input_string="$1"
  local suffix="_exec"
  local new_string="${input_string}${suffix}"
  echo "$new_string"
}

append_sub_suffix() {
  local input_string="$1"
  local suffix="_sub"
  local new_string="${input_string}${suffix}"
  echo "$new_string"
}

mkdir $1
cd $1
mkdir include
touch include/$1.hpp
mkdir src
touch src/$1.cpp
touch src/main.cpp
touch CMakeLists.txt
touch package.xml

snake_case_name=$1
upper_case_name=$(snake_to_uppercase "$snake_case_name")
camel_case_name=$(snake_to_camel "$snake_case_name")
name_remove_node=$(remove_suffix "$snake_case_name")
name_append_exec=$(append_exec_suffix "$name_remove_node")
name_append_data=$(append_data_suffix "$name_remove_node")
name_append_sub=$(append_sub_suffix "$name_remove_node")


SOURCE_CONTENT=$(cat << EOL
#include "$1.hpp"

$camel_case_name::$camel_case_name() : Component("$1")
{
    $name_append_sub = this->create_subscription<std_msgs::msg::String>("$name_append_data", 10, [this](const std_msgs::msg::String::SharedPtr msg)
    {
        RCLCPP_INFO(this->get_logger(), "%s", msg->data.c_str());
    });
}
EOL
)

MAIN_CONTENT=$(cat << EOL
#include "$1.hpp"

int main(int argc, char * argv[])
{
    rclcpp::init(argc, argv);
    rclcpp::spin(std::make_shared<$camel_case_name>());
    rclcpp::shutdown();
    return 0;
}
EOL
)

HEADER_CONTENT=$(cat << EOL
#include "robot_interface.hpp"
#include "component.hpp"
#include <memory>

class $camel_case_name : public Component
{
    public:
        $camel_case_name();
    private:
        Interface::string_sub_t $name_append_sub;
};
EOL
)


CMAKE_CONTENT=$(cat << EOL
cmake_minimum_required(VERSION 3.5)
project($1)

get_filename_component(SRC_DIR "\${CMAKE_CURRENT_SOURCE_DIR}" DIRECTORY)
get_filename_component(ROS_DIR "\${SRC_DIR}" DIRECTORY)
get_filename_component(ROOT_DIR "\${ROS_DIR}" DIRECTORY)

set(CMAKE_CXX_STANDARD 20)
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(scion_types REQUIRED)
find_package(rclcpp_action REQUIRED)
find_package(std_srvs REQUIRED)
find_package(std_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)

add_subdirectory(\${ROOT_DIR}/classes/src/dependency_library \${CMAKE_BINARY_DIR}/classes-build)

# Add your package's source files
add_executable(
    $name_append_exec 
    \${SRC_DIR}/$1/src/$1.cpp
    \${SRC_DIR}/$1/src/main.cpp
    \${SRC_DIR}/robot/src/component.cpp
)

# Link gtest and other libraries to  executable
target_link_libraries($name_append_exec
  dependency_library
  \${rclcpp_LIBRARIES}
)

target_include_directories(
    $name_append_exec PUBLIC 
    \${SRC_DIR}/$1/include
    \${SRC_DIR}/robot/include
)

ament_target_dependencies($name_append_exec scion_types rclcpp rclcpp_action std_srvs std_msgs sensor_msgs)

# Install the executable
install(TARGETS $name_append_exec
  DESTINATION lib/\${PROJECT_NAME}
)

ament_package() 
EOL
)

PACKAGE_CONTENT=$(cat << EOL
<?xml version="1.0"?>
<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
<package format="3">
<name>$1</name>
<version>0.0.0</version>
<description>Package for $1</description>
<maintainer email="mechatronics.sdsu@gmail.com">Zix</maintainer>
<license>MIT</license>

<export>
    <build_type>ament_cmake</build_type>
</export>
</package>
EOL
)


echo "$SOURCE_CONTENT" >  "src/$1.cpp"
echo "$HEADER_CONTENT" >  "include/$1.hpp"
echo "$MAIN_CONTENT" >    "src/main.cpp"
echo "$CMAKE_CONTENT" >   "CMakeLists.txt"
echo "$PACKAGE_CONTENT" > "package.xml"


## TEST ##
############################################################################################################

cd ../../../../test/ros2_ws/src
mkdir test_$1
cd test_$1
mkdir src
touch src/$1.cpp

TEST_CONTENT=$(cat << EOL
#include "robot.hpp"
#include "robot_interface.hpp"
#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "can_interface.hpp"
#include "components.hpp"
#include "component.hpp"
#include "$snake_case_name.hpp"
#include <chrono>

class ${upper_case_name}_TEST_SUITE : public ::testing::Test {
public:
    static void SetUpTestSuite() {
        rclcpp::init(0, nullptr);
    }

    static void TearDownTestSuite() {
        rclcpp::shutdown();
    }
};

namespace
{
    std::string waitForData()
    {
        std::string message = "";
        std::promise<bool> got_string;
        std::shared_future<bool> future  = got_string.get_future();
        Interface::node_t temp_node = rclcpp::Node::make_shared("${snake_case_name}_subscriber");
        Interface::string_sub_t string_sub = temp_node->create_subscription<std_msgs::msg::String>("$name_append_data", 10, [&message, &got_string](const std_msgs::msg::String::SharedPtr msg) {
            message = msg->data;
            got_string.set_value(true);
        });
        rclcpp::spin_until_future_complete(temp_node, future);
        return message;
    }
}

TEST_F(${upper_case_name}_TEST_SUITE, test_${snake_case_name}_subscription)
{
    Interface::node_t temp_node = rclcpp::Node::make_shared("${snake_case_name}_publisher");
    Interface::string_pub_t ${snake_case_name}_pub = temp_node->create_publisher<std_msgs::msg::String>("$name_append_data", 10);
    Interface::ros_timer_t ${snake_case_name}_timer = temp_node->create_wall_timer(std::chrono::milliseconds(10), [&${snake_case_name}_pub]() {
        std_msgs::msg::String msg = std_msgs::msg::String();
        msg.data = "Zix was here";
        ${snake_case_name}_pub->publish(msg);
    });   

    std::shared_future<std::string> string_message = std::async(std::launch::async, &waitForData);
    rclcpp::spin_until_future_complete(temp_node, string_message);
    EXPECT_EQ(string_message.get(), "Zix was here");
}

EOL
)

echo "$TEST_CONTENT" > "src/$1.cpp"
